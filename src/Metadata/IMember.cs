// Copyright (C) 2025 Kampute
//
// Released under the terms of the MIT license.
// See the LICENSE file in the project root for the full license text.

namespace Kampute.DocToolkit.Metadata
{
    using Kampute.DocToolkit.Metadata.Capabilities;
    using System.Reflection;

    /// <summary>
    /// Defines a contract for accessing member metadata.
    /// </summary>
    /// <remarks>
    /// This interface serves as the base for all member types derived from <see cref="MemberInfo"/>.
    /// </remarks>
    public interface IMember : IMetadataAdapter<MemberInfo>, IWithCustomAttributes
    {
        /// <summary>
        /// Gets the assembly that contains the member.
        /// </summary>
        /// <value>
        /// The assembly metadata that contains the member.
        /// </value>
        IAssembly Assembly { get; }

        /// <summary>
        /// Gets the namespace of the member.
        /// </summary>
        /// <value>
        /// The namespace containing the member.
        /// </value>
        string Namespace { get; }

        /// <summary>
        /// Gets the declaring type of the member, if any.
        /// </summary>
        /// <value>
        /// The declaring type of the member, or <see langword="null"/> if the member is not associated with a type.
        /// </value>
        IType? DeclaringType { get; }

        /// <summary>
        /// Gets the type that was used to obtain this member.
        /// </summary>
        /// <value>
        /// The type that declares this member, or <see langword="null"/> if the member was obtained through a different mechanism.
        /// </value>
        IType? ReflectedType { get; }

        /// <summary>
        /// Gets the unqualified name of the member.
        /// </summary>
        /// <value>
        /// The name of the member without its declaring type or namespace.
        /// </value>
        string Name { get; }

        /// <summary>
        /// Gets the visibility level of the member.
        /// </summary>
        /// <value>
        /// The <see cref="MemberVisibility"/> representing the member's visibility.
        /// </value>
        MemberVisibility Visibility { get; }

        /// <summary>
        /// Gets a value indicating whether the member is visible whithin its declaring context.
        /// </summary>
        /// <value>
        /// <see langword="true"/> if the member is visible within its declaring context; otherwise, <see langword="false"/>.
        /// </value>
        bool IsVisible { get; }

        /// <summary>
        /// Gets a value indicating whether the member is public.
        /// </summary>
        /// <value>
        /// <see langword="true"/> if the member is public; otherwise, <see langword="false"/>.
        /// </value>
        bool IsPublic { get; }

        /// <summary>
        /// Gets a value indicating whether the member is static.
        /// </summary>
        /// <value>
        /// <see langword="true"/> if the member is static; otherwise, <see langword="false"/>.
        /// </value>
        bool IsStatic { get; }

        /// <summary>
        /// Gets a value indicating whether this member is declared as unsafe.
        /// </summary>
        /// <value>
        /// <see langword="true"/> if this member is unsafe; otherwise, <see langword="false"/>.
        /// </value>
        bool IsUnsafe { get; }

        /// <summary>
        /// Gets a value indicating whether the member is a special name.
        /// </summary>
        /// <value>
        /// <see langword="true"/> if the member is a special name; otherwise, <see langword="false"/>.
        /// </value>
        bool IsSpecialName { get; }

        /// <summary>
        /// Gets a value indicating whether the member is generated by the compiler.
        /// </summary>
        /// <value>
        /// <see langword="true"/> if the member is generated by the compiler; otherwise, <see langword="false"/>.
        /// </value>
        bool IsCompilerGenerated => HasCustomAttribute("System.Runtime.CompilerServices.CompilerGeneratedAttribute");

        /// <summary>
        /// Gets a value indicating whether the member represents a direct declaration.
        /// </summary>
        /// <value>
        /// <see langword="true"/> if the member is a direct declaration; otherwise, <see langword="false"/>.
        /// </value>
        /// <remarks>
        /// This property distinguishes members that are directly declared in source code from those that represent
        /// constructed, derived, or placeholder forms.
        /// <para>
        /// Examples of members that return <see langword="false"/> include constructed generic types (e.g., a closed
        /// generic type constructed from a generic type definition), decorated types (e.g., arrays, pointers, by-reference
        /// types, or nullable value types), and type parameters.
        /// </para>
        /// </remarks>
        bool IsDirectDeclaration { get; }

        /// <summary>
        /// Gets the code reference for the member.
        /// </summary>
        /// <value>
        /// The code reference for the member.
        /// </value>
        string CodeReference { get; }
    }
}
